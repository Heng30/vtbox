import { LineEdit } from "std-widgets.slint";
import { CDialog } from "../base/cdialog.slint";
import { Store } from "../store.slint";
import { Util } from "../util.slint";
import { Logic } from "../logic.slint";
import { Theme } from "../theme.slint";
import { Label } from "../base/label.slint";
import { IconBtn } from "../base/icon-btn.slint";

export component ChangePasswordDialog inherits CDialog {
    visible: Store.is-show-change-account-password-dialog;
    title: Store.translator.change-password-dialog-title;
    width: 500px;

    function deinit() {
        old-password-lineedit.text = "";
        new-password-lineedit.text = "";
        confirm-password-lineedit.text = "";
        Store.is-show-change-account-password-dialog = false;
    }

    property<length> label-width: Store.setting-dialog-config.ui.language == "cn" ? 100px : 200px;
    property<bool> is-show-old-password: false;
    property<bool> is-show-new-password: false;
    property<bool> is-show-confirm-password: false;

    HorizontalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 2;

        Label {
            width: label-width;
            text: Store.translator.change-password-dialog-old-password + ":";
        }

        old-password-lineedit := LineEdit {
            input-type: is-show-old-password ? text : password;
        }

        IconBtn {
            width: Theme.icon-size * 1.33;
            icon-width: Theme.icon-size;
            icon: is-show-old-password ? @image-url("../images/eye-close.svg") : @image-url("../images/eye.svg");
            tip-pos: "left";
            tip-text: is-show-old-password ? Store.translator.tip-hide : Store.translator.tip-show;
            clicked => {
                is-show-old-password = !is-show-old-password;
            }
        }
    }

    HorizontalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 2;

        Label {
            width: label-width;
            text: Store.translator.change-password-dialog-new-password + ":";
        }

        new-password-lineedit := LineEdit {
            input-type: is-show-new-password ? text : password;
        }

        IconBtn {
            width: Theme.icon-size * 1.33;
            icon-width: Theme.icon-size;
            icon: is-show-new-password ? @image-url("../images/eye-close.svg") : @image-url("../images/eye.svg");
            tip-pos: "left";
            tip-text: is-show-new-password ? Store.translator.tip-hide : Store.translator.tip-show;
            clicked => {
                is-show-new-password = !is-show-new-password;
            }
        }
    }

    HorizontalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 2;

        Label {
            width: label-width;
            text: Store.translator.change-password-dialog-confirm-password + ":";
        }

        confirm-password-lineedit := LineEdit {
            input-type: is-show-confirm-password ? text : password;
        }

        IconBtn {
            width: Theme.icon-size * 1.33;
            icon-width: Theme.icon-size;
            icon: is-show-confirm-password ? @image-url("../images/eye-close.svg") : @image-url("../images/eye.svg");
            tip-pos: "left";
            tip-text: is-show-confirm-password ? Store.translator.tip-hide : Store.translator.tip-show;
            clicked => {
                is-show-confirm-password = !is-show-confirm-password;
            }
        }
    }

    ok-clicked => {
        if (new-password-lineedit.text != confirm-password-lineedit.text) {
            Logic.show-message(Store.translator.new-account-dialog-password-mismatch, "warning");
            return ;
        }

        Logic.change-password(Store.account.uuid, old-password-lineedit.text, new-password-lineedit.text);

        deinit();
    }

    cancel-clicked => {
        deinit();
    }
}
