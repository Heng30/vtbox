import { ComboBox, ListView } from "std-widgets.slint";
import { Theme } from "../../theme.slint";
import { Store } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { IconBtn } from "../../base/icon-btn.slint";
import { Label } from "../../base/label.slint";

export component Model inherits Rectangle {
    in-out property model-type-index <=> type-combox.current-index;

    VerticalLayout {
        spacing: Theme.spacing * 2;

        HorizontalLayout {
            spacing: Theme.spacing * 10;
            HorizontalLayout {
                Label {
                    text: Store.translator.model-type + ": ";
                }

                type-combox := ComboBox {
                    model: [Store.translator.tip-voice2text, /* Store.translator.tip-text2voice */ ];
                    current-value: self.model[0];
                    current-index: 0;

                    selected => {
                        vbox.selected-uuid = "";
                        Logic.switch-model-type(self.current-index);
                    }
                }
            }

            HorizontalLayout {
                spacing: Theme.spacing * 2;

                IconBtn {
                    width: Theme.icon-size * 1.33;
                    icon-width: Theme.icon-size * 1;
                    icon: @image-url("../../images/download.svg");
                    tip-pos: "left";
                    tip-text: Store.translator.tip-download;
                    clicked => {
                        Logic.download-model(type-combox.current-index, vbox.selected-uuid);
                    }
                }

                IconBtn {
                    width: Theme.icon-size * 1.33;
                    icon-width: Theme.icon-size * 1;
                    icon: @image-url("../../images/import.svg");
                    tip-pos: "left";
                    tip-text: Store.translator.tip-import;
                    clicked => {
                        Logic.import-model(type-combox.current-index);
                    }
                }

                IconBtn {
                    width: Theme.icon-size * 1.33;
                    icon-width: Theme.icon-size * 0.75;
                    icon: @image-url("../../images/reset.svg");
                    tip-pos: "left";
                    tip-text: Store.translator.tip-refresh;
                    clicked => {
                        Logic.refresh-model(type-combox.current-index);
                    }
                }

                IconBtn {
                    width: Theme.icon-size * 1.33;
                    icon-width: Theme.icon-size * 0.85;
                    icon: @image-url("../../images/delete-light.svg");
                    tip-pos: "left";
                    tip-text: Store.translator.tip-delete;
                    clicked => {
                        Store.ok-cancel-dialog-setting.title-type = "warning";
                        Store.ok-cancel-dialog-setting.title-text = Store.translator.warning;
                        Store.ok-cancel-dialog-setting.body-text = Store.translator.delete-or-not;
                        Store.ok-cancel-dialog-setting.handle-type = "remove-model";
                        Store.ok-cancel-dialog-setting.handle-uuid = type-combox.current-index + "," + vbox.selected-uuid;

                        vbox.selected-uuid = "";
                    }
                }
            }
        }

        Rectangle {
            border-width: Theme.border-width;
            border-color: Theme.darker-border-color;

            vbox := VerticalLayout {
                property <[percent]> label-width: [50%, 20%, 30%];
                property <string> selected-uuid;

                padding: Theme.padding / 2;

                header := Rectangle {
                    background: Theme.lighter-border-color;

                    HorizontalLayout {
                        Label {
                            width: label-width[0];
                            text: Store.translator.model-header-name;
                        }
                        Label {
                            width: label-width[1];
                            text: Store.translator.model-header-size;
                        }
                        Label {
                            width: label-width[2];
                            text: Store.translator.model-header-status;
                        }
                    }
                }

                ListView {
                    for data[index] in Store.model-datas : Rectangle {

                        background: vbox.selected-uuid == data.uuid ? Theme.hover-color-dark : (touch.has-hover ? Theme.hover-color : Colors.transparent);
                        VerticalLayout {
                            padding-left: Theme.padding;

                            HorizontalLayout {
                                padding-bottom: Theme.padding * 2;

                                Label {
                                    width: label-width[0];
                                    text: data.name;
                                    overflow: elide;
                                }
                                Label {
                                    width: label-width[1];
                                    text: data.size;
                                }
                                Label {
                                    width: label-width[2];
                                    text: data.status;
                                }
                            }
                        }

                        touch := TouchArea {
                            mouse-cursor: self.has-hover ? pointer : default;
                            clicked => { vbox.selected-uuid = data.uuid; }
                        }
                    }
                }
            }
        }
    }
}

